{"version":3,"file":"sifter.js","sources":["../../lib/sifter.ts"],"sourcesContent":["/**\n * sifter.js\n * Copyright (c) 2013â€“2020 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n// @ts-ignore\nimport { scoreValue, getAttr, getAttrNesting, escape_regex, propToArray, iterate, cmp } from './utils.ts';\n// @ts-ignore\nimport { diacriticRegexPoints, asciifold } from './diacritics.ts';\n\n\ntype TField = {\n\tfield: string,\n\tweight?: number,\n}\n\ntype TOptions = {\n \tfields: TField[],\n \tsort: any[],\n \tscore?: ()=>any,\n \tfilter?: boolean,\n \tlimit?: number,\n \tsort_empty?: any,\n \tnesting?: boolean,\n\trespect_word_boundaries?: boolean,\n\tconjunction?: string,\n}\n\ntype TToken = {\n\tstring:string,\n\tregex:RegExp,\n\tfield:string\n}\n\ntype TWeights = {[key:string]:number}\n\ntype TPrepareObj = {\n\toptions: TOptions,\n\tquery: string,\n\ttokens: TToken[],\n\ttotal: number,\n\titems: any[],\n\tweights: TWeights,\n\tgetAttrFn: (any,string)=>any,\n\n}\n\n\nexport default class Sifter{\n\n\tpublic items: []|{};\n\tpublic settings: {diacritics:boolean};\n\n\t/**\n\t * Textually searches arrays and hashes of objects\n\t * by property (or multiple properties). Designed\n\t * specifically for autocomplete.\n\t *\n\t * @constructor\n\t * @param {array|object} items\n\t * @param {object} items\n\t */\n\tconstructor(items, settings) {\n\t\tthis.items = items;\n\t\tthis.settings = settings || {diacritics: true};\n\t};\n\n\t/**\n\t * Splits a search string into an array of individual\n\t * regexps to be used to match results.\n\t *\n\t */\n\ttokenize(query:string, respect_word_boundaries?:boolean, weights?:TWeights ):TToken[] {\n\t\tif (!query || !query.length) return [];\n\n\t\tvar tokens = [];\n\t\tvar words = query.split(/\\s+/);\n\t\tvar field_regex;\n\n\t\tif( weights ){\n\t\t\tfield_regex = new RegExp( '^('+ Object.keys(weights).map(escape_regex).join('|')+')\\:(.*)$');\n\t\t}\n\n\t\twords.forEach((word:string) => {\n\t\t\tlet field_match;\n\t\t\tlet field\t= null;\n\t\t\tlet regex\t= null;\n\n\t\t\t// look for \"field:query\" tokens\n\t\t\tif( field_regex && (field_match = word.match(field_regex)) ){\n\t\t\t\tfield\t= field_match[1];\n\t\t\t\tword\t= field_match[2];\n\t\t\t}\n\n\t\t\tif( word.length > 0 ){\n\t\t\t\tregex = escape_regex(word);\n\t\t\t\tif( this.settings.diacritics ){\n\t\t\t\t\tregex = diacriticRegexPoints(regex);\n\t\t\t\t}\n\t\t\t\tif( respect_word_boundaries ) regex = \"\\\\b\"+regex\n\t\t\t\tregex = new RegExp(regex, 'i');\n\t\t\t}\n\n\t\t\ttokens.push({\n\t\t\t\tstring : word,\n\t\t\t\tregex  : regex,\n\t\t\t\tfield  : field,\n\t\t\t});\n\t\t});\n\n\t\treturn tokens;\n\t};\n\n\n\t/**\n\t * Returns a function to be used to score individual results.\n\t *\n\t * Good matches will have a higher score than poor matches.\n\t * If an item is not a match, 0 will be returned by the function.\n\t *\n\t * @returns {function}\n\t */\n\tgetScoreFunction(query:string, options ){\n\t\tvar search = this.prepareSearch(query, options);\n\t\treturn this._getScoreFunction(search);\n\t}\n\n\t_getScoreFunction(search:TPrepareObj ){\n\t\tconst tokens\t\t= search.tokens,\n\t\ttoken_count\t\t\t= tokens.length;\n\n\t\tif (!token_count) {\n\t\t\treturn function() { return 0; };\n\t\t}\n\n\t\tconst fields\t= search.options.fields,\n\t\tweights\t\t\t= search.weights,\n\t\tfield_count\t\t= fields.length,\n\t\tgetAttrFn\t\t= search.getAttrFn;\n\n\n\n\t\t/**\n\t\t * Calculates the score of an object\n\t\t * against the search query.\n\t\t *\n\t\t * @param {TToken} token\n\t\t * @param {object} data\n\t\t * @return {number}\n\t\t */\n\t\tvar scoreObject = (function() {\n\n\t\t\tif (!field_count) {\n\t\t\t\treturn function() { return 0; };\n\t\t\t}\n\n\t\t\tif (field_count === 1) {\n\t\t\t\treturn function(token:TToken, data) {\n\t\t\t\t\tconst field = fields[0].field;\n\t\t\t\t\treturn scoreValue(getAttrFn(data, field), token, weights[field]);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn function(token:TToken, data) {\n\t\t\t\tvar sum = 0;\n\n\t\t\t\t// is the token specific to a field?\n\t\t\t\tif( token.field ){\n\n\t\t\t\t\tconst value = getAttrFn(data, token.field);\n\n\t\t\t\t\tif( !token.regex && value ){\n\t\t\t\t\t\tsum += 0.1;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsum += scoreValue(value, token, weights[token.field]);\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}else{\n\t\t\t\t\titerate(weights, (weight, field) => {\n\t\t\t\t\t\tsum += scoreValue(getAttrFn(data, field), token, weight);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn sum / field_count;\n\t\t\t};\n\t\t})();\n\n\t\tif (token_count === 1) {\n\t\t\treturn function(data) {\n\t\t\t\treturn scoreObject(tokens[0], data);\n\t\t\t};\n\t\t}\n\n\t\tif (search.options.conjunction === 'and') {\n\t\t\treturn function(data) {\n\t\t\t\tvar i = 0, score, sum = 0;\n\t\t\t\tfor (; i < token_count; i++) {\n\t\t\t\t\tscore = scoreObject(tokens[i], data);\n\t\t\t\t\tif (score <= 0) return 0;\n\t\t\t\t\tsum += score;\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(data) {\n\t\t\t\tvar sum = 0;\n\t\t\t\titerate(tokens,(token:TToken)=>{\n\t\t\t\t\tsum += scoreObject(token, data);\n\t\t\t\t});\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Returns a function that can be used to compare two\n\t * results, for sorting purposes. If no sorting should\n\t * be performed, `null` will be returned.\n\t *\n\t * @return function(a,b)\n\t */\n\tgetSortFunction(query:string, options) {\n\t\tvar search  = this.prepareSearch(query, options);\n\t\treturn this._getSortFunction(search);\n\t}\n\n\t_getSortFunction(search:TPrepareObj){\n\t\tvar i, n, self, sort_fld, sort_flds, sort_flds_count, multiplier, multipliers, get_field, implicit_score, sort, options;\n\n\t\tself\t\t= this;\n\t\toptions\t\t= search.options;\n\t\tsort\t\t= (!search.query && options.sort_empty) || options.sort;\n\n\t\t/**\n\t\t * Fetches the specified sort field value\n\t\t * from a search result item.\n\t\t *\n\t\t * @param  {string} name\n\t\t * @param  {object} result\n\t\t * @return {string}\n\t\t */\n\t\tget_field = function(name, result) {\n\t\t\tif (name === '$score') return result.score;\n\t\t\treturn search.getAttrFn(self.items[result.id], name);\n\t\t};\n\n\t\t// parse options\n\t\tsort_flds = [];\n\t\tif (sort) {\n\t\t\tfor (i = 0, n = sort.length; i < n; i++) {\n\t\t\t\tif (search.query || sort[i].field !== '$score') {\n\t\t\t\t\tsort_flds.push(sort[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// the \"$score\" field is implied to be the primary\n\t\t// sort field, unless it's manually specified\n\t\tif (search.query) {\n\t\t\timplicit_score = true;\n\t\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\t\tif (sort_flds[i].field === '$score') {\n\t\t\t\t\timplicit_score = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (implicit_score) {\n\t\t\t\tsort_flds.unshift({field: '$score', direction: 'desc'});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\t\tif (sort_flds[i].field === '$score') {\n\t\t\t\t\tsort_flds.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmultipliers = [];\n\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\tmultipliers.push(sort_flds[i].direction === 'desc' ? -1 : 1);\n\t\t}\n\n\t\t// build function\n\t\tsort_flds_count = sort_flds.length;\n\t\tif (!sort_flds_count) {\n\t\t\treturn null;\n\t\t} else if (sort_flds_count === 1) {\n\t\t\tsort_fld = sort_flds[0].field;\n\t\t\tmultiplier = multipliers[0];\n\t\t\treturn function(a, b) {\n\t\t\t\treturn multiplier * cmp(\n\t\t\t\t\tget_field(sort_fld, a),\n\t\t\t\t\tget_field(sort_fld, b)\n\t\t\t\t);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(a, b) {\n\t\t\t\tvar i, result, field;\n\t\t\t\tfor (i = 0; i < sort_flds_count; i++) {\n\t\t\t\t\tfield = sort_flds[i].field;\n\t\t\t\t\tresult = multipliers[i] * cmp(\n\t\t\t\t\t\tget_field(field, a),\n\t\t\t\t\t\tget_field(field, b)\n\t\t\t\t\t);\n\t\t\t\t\tif (result) return result;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Parses a search query and returns an object\n\t * with tokens and fields ready to be populated\n\t * with results.\n\t *\n\t */\n\tprepareSearch(query:string, optsUser):TPrepareObj {\n\t\tconst weights\t= {};\n\t\tvar options\t\t= Object.assign({},optsUser);\n\n\t\tpropToArray(options,'sort');\n\t\tpropToArray(options,'sort_empty');\n\n\t\t// convert fields to new format\n\t\tif( options.fields ){\n\t\t\tpropToArray(options,'fields');\n\t\t\tif( Array.isArray(options.fields) && typeof options.fields[0] !== 'object' ){\n\t\t\t\tvar fields = [];\n\t\t\t\toptions.fields.forEach((fld_name) => {\n\t\t\t\t\tfields.push({field:fld_name});\n\t\t\t\t});\n\t\t\t\toptions.fields = fields;\n\t\t\t}\n\n\n\t\t\toptions.fields.forEach((field_params)=>{\n\t\t\t\tweights[field_params.field] = ('weight' in field_params) ? field_params.weight : 1;\n\t\t\t});\n\t\t}\n\n\t\tquery = asciifold( String(query || '') ).toLowerCase().trim();\n\n\t\treturn {\n\t\t\toptions\t\t: options,\n\t\t\tquery\t\t: query,\n\t\t\ttokens\t\t: this.tokenize(query, options.respect_word_boundaries, weights),\n\t\t\ttotal\t\t: 0,\n\t\t\titems\t\t: [],\n\t\t\tweights\t\t: weights,\n\t\t\tgetAttrFn\t: (options.nesting) ? getAttrNesting : getAttr,\n\t\t};\n\t};\n\n\t/**\n\t * Searches through all items and returns a sorted array of matches.\n\t *\n\t */\n\tsearch(query:string, options:TOptions) : TPrepareObj {\n\t\tvar self = this, score, search;\n\t\tvar fn_sort;\n\t\tvar fn_score;\n\n\t\tsearch  = this.prepareSearch(query, options);\n\t\toptions = search.options;\n\t\tquery   = search.query;\n\n\t\t// generate result scoring function\n\t\tfn_score = options.score || self._getScoreFunction(search);\n\n\t\t// perform search and sort\n\t\tif (query.length) {\n\t\t\titerate(self.items, (item, id) => {\n\t\t\t\tscore = fn_score(item);\n\t\t\t\tif (options.filter === false || score > 0) {\n\t\t\t\t\tsearch.items.push({'score': score, 'id': id});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\titerate(self.items, (item, id) => {\n\t\t\t\tsearch.items.push({'score': 1, 'id': id});\n\t\t\t});\n\t\t}\n\n\t\tfn_sort = self._getSortFunction(search);\n\t\tif (fn_sort) search.items.sort(fn_sort);\n\n\t\t// apply limits\n\t\tsearch.total = search.items.length;\n\t\tif (typeof options.limit === 'number') {\n\t\t\tsearch.items = search.items.slice(0, options.limit);\n\t\t}\n\n\t\treturn search;\n\t};\n}\n"],"names":["Sifter","constructor","items","settings","diacritics","tokenize","query","respect_word_boundaries","weights","length","tokens","words","split","field_regex","RegExp","Object","keys","map","escape_regex","join","forEach","word","field_match","field","regex","match","diacriticRegexPoints","push","string","getScoreFunction","options","search","prepareSearch","_getScoreFunction","token_count","fields","field_count","getAttrFn","scoreObject","token","data","scoreValue","sum","value","iterate","weight","conjunction","i","score","getSortFunction","_getSortFunction","n","self","sort_fld","sort_flds","sort_flds_count","multiplier","multipliers","get_field","implicit_score","sort","sort_empty","name","result","id","unshift","direction","splice","a","b","cmp","optsUser","assign","propToArray","Array","isArray","fld_name","field_params","asciifold","String","toLowerCase","trim","total","nesting","getAttrNesting","getAttr","fn_sort","fn_score","item","filter","limit","slice"],"mappings":"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"}